{"version":3,"sources":["component/layout/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","slideCls","clickFix","bind","assertThisInitialized","setState","console","log","react_default","a","createElement","style","navWrap","navTitle","navFix","onClick","className","Component","borderColor","backgroundColor","transition","fontFamily","fontWeight","letterSpacing","padding","height","lineHeight","textDecoration","color","textAlign","display","position","top","right","fontSize","cursor","borderRadius","App","react","Nav","prop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEMA,cACH,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACVC,WAAYT,EAAMS,WAClBC,SAAU,UAGbT,EAAKU,SAAWV,EAAKU,SAASC,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAPAA,0EAWfG,KAAKU,SAAS,SAAAN,GAAK,MAAK,CACrBC,YAAaD,EAAMC,qDAKtBM,QAAQC,IAAIZ,KAAKK,6CAMlB,OACGQ,EAAAC,EAAAC,cAAA,OAAKC,MAAOC,GAETJ,EAAAC,EAAAC,cAAA,KAAGC,MAAOE,GAAV,gBAEAL,EAAAC,EAAAC,cAAA,UAAQC,MAAOG,EAAQC,QAASpB,KAAKO,UAArC,QACSP,KAAKI,MAAMC,WAAa,KAAO,OAGxCQ,EAAAC,EAAAC,cAAA,MAAIM,UAAWrB,KAAKI,MAAME,UACvBO,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,4BApCUO,aA4CnBL,EAAU,CACbM,YAAa,qBACbC,gBAAiB,OACjBC,WAAY,WACZC,WAAY,uCACZC,WAAY,IACZC,cAAe,MACfC,QAAS,WACTC,OAAO,OACPC,WAAW,QAGRb,EAAW,CACdc,eAAe,OACfC,MAAM,QACNC,UAAU,SACVC,QAAQ,SAGLhB,EAAS,CACZiB,SAAS,QACTC,IAAI,EACJC,MAAM,GACNC,SAAU,OACVV,QAAS,WACTI,MAAO,OACPO,OAAQ,UACRjB,YAAa,iBACbkB,aAAc,SACdjB,gBAAiB,QAGL7B,IC3DA+C,cAfb,SAAAA,EAAY9C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IACjB7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAY,GAHGR,wEAOjB,OACEgB,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAKC,KAAK,uBAVAvB,aCSEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a58a0f4a.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Navigation extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         isToggleOn: props.isToggleOn,\n         slideCls: 'active'\n      };\n  \n      this.clickFix = this.clickFix.bind(this);\n    }\n\n    clickFix() {\n       this.setState(state => ({\n          isToggleOn: !state.isToggleOn\n       }));\n    }\n\n    navSlideMenu() {\n       console.log(this.isToggleOn);\n    }\n\n    \n\n   render() {\n      return (\n         <div style={navWrap}>\n\n            <a style={navTitle}>Juno Gallery</a>\n\n            <button style={navFix} onClick={this.clickFix}>\n               Menu {this.state.isToggleOn ? 'ON' : 'OFF'}\n            </button>\n\n            <ul className={this.state.slideCls}>\n               <li>Vue</li>\n               <li>Angular</li>\n               <li>React</li>\n            </ul>\n\n         </div>\n      )\n   }\n};\n\nconst navWrap = {\n   borderColor: 'rgba(34,34,34,.05)',\n   backgroundColor: '#fff',\n   transition: 'all .35s',\n   fontFamily: 'Catamaran,Helvetica,Arial,sans-serif',\n   fontWeight: 200,\n   letterSpacing: '1px',\n   padding: '6px 12px',\n   height:'31px',\n   lineHeight:'31px'\n};\n\nconst navTitle = {\n   textDecoration:'none',\n   color:'black',\n   textAlign:'center',\n   display:'block'\n}\n\nconst navFix = {\n   position:'fixed',\n   top:5,\n   right:12,\n   fontSize: '12px',\n   padding: '8px 10px',\n   color: '#222',\n   cursor: 'pointer',\n   borderColor: 'rgba(0,0,0,.1)',\n   borderRadius: '.25rem',\n   backgroundColor: '#fff'\n}\n\nexport default Navigation;","import React, { Component, Fragment } from 'react';\nimport Nav from './component/layout/Nav';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isToggleOn: true\n    };\n  }\n  render() {\n    return (\n      <Fragment>\n        <Nav prop=\"isToggleOn\" />\n      </Fragment> \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}