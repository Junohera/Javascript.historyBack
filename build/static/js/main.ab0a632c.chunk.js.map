{"version":3,"sources":["component/common/Icon.js","component/layout/Nav.js","component/layout/Header.js","component/layout/Content.js","component/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Icon","_ref","name","category","style","iconClass","concat","react_default","a","createElement","className","Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickToggle","setState","toggleNav","state","active","dashboardClass","dashboardItems","index","viewText","iconName","color","map","v","key","toString","common_Icon","onClick","React","Component","Header","Content","isNav","ContentClass","layout_Header","Footer","App","react","Nav","layout_Content","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab0a632c.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * @param {String} name     아이콘 이름 \n * @param {String} category 아이콘 구분 \n * @param {Object} style    아이콘 스타일\n */\nconst Icon = ({ name, category, style }) => {\n    const iconClass = `\n        ${name} \n        ${category ? category : 'fas'}\n    `;\n    return (<i className={iconClass} style={style}></i>);\n};\n\nexport default Icon;","import React from 'react';\nimport Icon from '../common/Icon';\n\nclass Navigation extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {toggleNav: false};\n    }\n    \n    onClickToggle = () => {\n       this.setState({\n          toggleNav : !this.state.toggleNav\n       })\n    }\n\n   render() {\n      const active = this.state.toggleNav ? 'active' : null;\n      const dashboardClass = `float_dashboard ${active}`;\n\n\n      const dashboardList = [{\n          index: 0,\n          viewText: 'Vue',\n          iconName: 'fa-vuejs',\n          category: 'fab',\n          style: {\n             color:'#42b983'\n          }\n        }, {\n          index: 1,\n          viewText: 'Angular',\n          iconName: 'fa-angular',\n          category: 'fab',\n          style: {\n             color:'#db0e36'\n          }\n        }, {\n          index: 2,\n          viewText: 'React',\n          iconName: 'fa-react',\n          category: 'fab',\n          style: {\n            color:'#67DAF9'\n         }\n        }];\n        \n      const dashboardItems = dashboardList.map(v => \n         <li className=\"menuIcons\" key={v.index.toString()}>\n            <Icon category={v.category} name={v.iconName} style={v.style} />\n            <span>{v.viewText}</span>\n         </li>\n      )\n\n      return (\n         <div className=\"navigation\">\n\n            <a className=\"title\">Juno Gallery</a>\n\n            <button onClick={this.onClickToggle} className=\"float_btn\"> \n               {this.state.toggleNav ? <Icon name=\"fa-times\" /> : <Icon name=\"fa-bars\" />} \n            </button>\n\n            <ul className={dashboardClass}>\n               {dashboardItems}\n            </ul>\n\n         </div>\n      )\n   }\n};\n\nexport default Navigation;","import React from 'react';\n\nclass Header extends React.Component {\n   // constructor(props) {\n   //    super(props);\n   //    this.state = {toggleNav: false};\n   //  }\n\n\n   render() {\n      // const active = this.state.toggleNav ? 'active' : null;\n      // const dashboardClass = `float_dashboard ${active}`;\n\n      return (\n         <section className=\"header\">\n            <h5>\n            New Age is an app landing page that will help you beautifully showcase your new mobile app, or anything else!\n            </h5>            \n         </section>\n      )\n   }\n};\n\nexport default Header;","import React from 'react';\nimport Header from './Header';\n\nclass Content extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {toggleNav: false};\n    }\n\n\n   render() {\n      const active = this.props.isNav ? 'has-Nav' : '';\n      const ContentClass = `wrapper ${active}`;\n\n      return (\n         <section className={ContentClass}>\n            <Header />\n            <Header />\n            <Header />\n            <Header />\n         </section>\n      )\n   }\n};\n\nexport default Content;","import React from 'react';\n\nclass Footer extends React.Component {\n   // constructor(props) {\n   //    super(props);\n   //    this.state = {toggleNav: false};\n   //  }\n\n\n   render() {\n      // const active = this.state.toggleNav ? 'active' : null;\n      // const dashboardClass = `float_dashboard ${active}`;\n\n      return (\n         <footer>\n            footer\n         </footer>\n      )\n   }\n};\n\nexport default Footer;","import React, { Component, Fragment } from 'react';\nimport Nav from './component/layout/Nav';\nimport Content from './component/layout/Content';\nimport Footer from './component/layout/Footer';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNav: true\n    };\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.isNav && <Nav />}\n        <Content isNav={this.state.isNav}/>\n        <Footer/>\n      </Fragment> \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}